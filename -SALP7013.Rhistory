names(pair.list) <- gsub("TS_name", "site2", names(pair.list))
## calculate cross-correlation functions at different time lags
## (NB - we are only be interested in the current year, i.e. lag = 0)
max.lag <- 0 # maximum time lag over which cross-correlations are assessed
CCF <- data.frame(matrix(NA, ncol = 2*max.lag+2, nrow = nrow(pair.list)))	## matrix to store cross-correlation coefficients
names(CCF) <- c(paste("lag", -max.lag:max.lag, sep=""), "numYears") ## adds column names
for(k in 1:nrow(pair.list)){
# print(paste("row number=",k,"out of",nrow(pair.list)))
## calculate number of years to base correlation on...
CCF$numYears[k] <- length(na.omit((TS[,pair.list[k,1]]+TS[,pair.list[k,2]]))) ## add up number of times when sum can be done (i.e. neither is NA) then only include site with > 6 common years of data
## attempt calculation of CCF...
try(CCF[k,-ncol(CCF)] <- ccf(TS[,pair.list[k,1]], TS[,pair.list[k,2]], lag.max=max.lag, na.action=na.exclude, plot=F, type="correlation")$acf, silent=T) ## use try to prevent crashes if no data
} ## this will take a long time!!!
#hist(CCF$lag0)
#hist(CCF$numYears)
CCF1 <- CCF
## rank by numYears
CCF1 <- arrange(CCF1, desc(numYears))
## chop out rows where numYears<7
CCF1 <- CCF1[CCF1$numYears>6,]
CCF1 <- na.omit(CCF1)
# if statement to skip species which won't run
if (nrow(CCF1)<2){
print(paste("skip species", g, "year", i+4.5))
next
}
pair.attr <- pair.list ## matrix to hold attributes of pairs...
colnames(pair.attr) <- c("site1","site2")
pair.attr <- cbind(pair.attr, CCF)     ### add in correlation scores and number of comparisons at each site.
head(pair.attr)
###  correct site numbers ###
pair.attr <- merge(pair.attr, site_match, by.x="site1", by.y="TS_name")
pair.attr <- pair.attr[,c("site_name", "site2", "lag0", "numYears")]
names(pair.attr) <- gsub("site_name", "site1", names(pair.attr))
pair.attr <- merge(pair.attr, site_match, by.x="site2", by.y="TS_name")
pair.attr <- pair.attr[,c("site1", "site_name", "lag0", "numYears")]
names(pair.attr) <- gsub("site_name", "site2", names(pair.attr))
### drop sites comparisons with <7 years of survey data in common
new_pair_attr <- pair.attr[pair.attr$numYears>6,]
new_pair_attr <- new_pair_attr[!is.na(new_pair_attr$lag0),]
new_pair_attr$mid.year<-mid.year
new_pair_attr$start.year<-start.year
new_pair_attr$end.year<-end.year
# create a table of all pair-wise comparisons, this will be built up as we move through years
all_pair_attr <- NULL
all_pair_attr <- rbind(all_pair_attr, new_pair_attr)
### record the number of good pair-wise comparisons and number of unique sites
temp_summ_stats <- data.frame(total_comps = nrow(new_pair_attr), uni_sites = length(unique(c(new_pair_attr$site1, new_pair_attr$site2))))
tp_summ_stats <- NULL
tp_summ_stats <- rbind(tp_summ_stats, temp_summ_stats)
tp_summ_stats$mid.year<-mid.year
tp_summ_stats$start.year<-start.year
tp_summ_stats$end.year<-end.year
### add in species info
tp_summ_stats$spp <- g
final_summ_stats <- rbind(final_summ_stats, tp_summ_stats)
all_pair_attr$spp <- g
final_pair_data <- rbind(final_pair_data, all_pair_attr)
} # end i in year
} # end g in species
library(dplyr)
final_pair_data <- NULL
final_summ_stats <- NULL
### split based on species ###
for (g in spp.list){ # loop through spp.list
spp_data <- final_data[final_data$name==g,]
total_comp <- NULL
print(paste("species",g))
year.list<-1980:1991
for (i in year.list){ # loop through years
start.year<-i
mid.year<-i+4.5
print(paste("mid.year=",mid.year))
end.year<-i+9
species.10.yr.data<-spp_data[spp_data$year>=start.year&spp_data$year<=end.year,]
################################
# create a matrix to be filled #
site.list <- unique(species.10.yr.data$site)
site.list
year.list.temp <- min(species.10.yr.data$year):max(species.10.yr.data$year)
year.list.temp
Grow.matrix<-matrix(c(species.10.yr.data$gr), nrow=length(year.list.temp))
Grow.matrix
ncol(Grow.matrix)
rownames(Grow.matrix)<-year.list.temp
colnames(Grow.matrix)<-site.list
Grow.matrix
length(site.list)
num.ts <- length(site.list)   # number of time series
TS <- matrix(Grow.matrix, ncol=num.ts)    # stores Grow data in a matrix     (simply removes names!)
TS
# create site match table used to correct sites names after calculating synchrony
site_match <- data.frame(TS_name = 1:ncol(TS), site_name = colnames(Grow.matrix))
###############################
# cross-correlation functions #
pair.list <- NULL             # calculates combination between all the pairs of sites
for(k in 1:(num.ts-1)){
pair.list <- rbind(pair.list, cbind(rep(k, num.ts-k), (k+1):num.ts)) ## species 508 has only 2 sites, so this line of code doesn't work...
} # end k in num.ts-1
nrow(pair.list)
colnames(pair.list) <- c("site1","site2")
#### NOTE- ADD IN THE REAL SITE NAMES HERE, MERGE WITH SITE_DATA TABLE, THEN  CUT DOWN THE TABLE TO ONLY INCLUDE PAIRS WHERE distance < 100000 (100km)) ####
## e.g.   merge(data1,data2,by.x=c(col1,col2),by.y=c(site_a,site_b)) ##
###  correct site numbers ###
pair.list <- merge(pair.list, site_match, by.x="site1", by.y="TS_name")
pair.list <- pair.list[,c("site_name", "site2")]
names(pair.list) <- gsub("site_name", "site1", names(pair.list))
pair.list <- merge(pair.list, site_match, by.x="site2", by.y="TS_name")
pair.list <- pair.list[,c("site1", "site_name")]
names(pair.list) <- gsub("site_name", "site2", names(pair.list))
## merge pair.list with site data
site_data[,c(1,2)] <- sapply(site_data[,c(1,2)], as.factor)
site_data_pair1 <- merge(pair.list, site_data, by.x=c("site1", "site2"), by.y=c("site_a", "site_b"))
site_data_reverse <- site_data
names(site_data_reverse)[1:6] <- c("site_b", "site_a", "site_b_EAST", "site_b_NORTH", "site_a_EAST", "site_a_NORTH")
site_data_pair2 <- merge(pair.list, site_data_reverse, by.x=c("site1", "site2"), by.y=c("site_a", "site_b"))
site_data_pair <- rbind(site_data_pair1, site_data_pair2)
# unique(pair.list$site1)[!unique(pair.list$site1)%in%unique(site_data$site_a)]   # how many sites are missing attribute data
## remove site pair comparisons more than 100km apart
site_data_pair <- site_data_pair[site_data_pair$distance <= 100000,]
pair.list<-merge(pair.list,site_data_pair,by.x=c("site1", "site2"),by.y=c("site1", "site2"))[,1:2]
# change site names back to numbers
pair.list <- merge(pair.list, site_match, by.x="site1", by.y="site_name")
pair.list <- pair.list[,c("TS_name", "site2")]
names(pair.list) <- gsub("TS_name", "site1", names(pair.list))
pair.list <- merge(pair.list, site_match, by.x="site2", by.y="site_name")
pair.list <- pair.list[,c("site1", "TS_name")]
names(pair.list) <- gsub("TS_name", "site2", names(pair.list))
## calculate cross-correlation functions at different time lags
## (NB - we are only be interested in the current year, i.e. lag = 0)
max.lag <- 0 # maximum time lag over which cross-correlations are assessed
CCF <- data.frame(matrix(NA, ncol = 2*max.lag+2, nrow = nrow(pair.list)))	## matrix to store cross-correlation coefficients
names(CCF) <- c(paste("lag", -max.lag:max.lag, sep=""), "numYears") ## adds column names
for(k in 1:nrow(pair.list)){
# print(paste("row number=",k,"out of",nrow(pair.list)))
## calculate number of years to base correlation on...
CCF$numYears[k] <- length(na.omit((TS[,pair.list[k,1]]+TS[,pair.list[k,2]]))) ## add up number of times when sum can be done (i.e. neither is NA) then only include site with > 6 common years of data
## attempt calculation of CCF...
try(CCF[k,-ncol(CCF)] <- ccf(TS[,pair.list[k,1]], TS[,pair.list[k,2]], lag.max=max.lag, na.action=na.exclude, plot=F, type="correlation")$acf, silent=T) ## use try to prevent crashes if no data
} ## this will take a long time!!!
#hist(CCF$lag0)
#hist(CCF$numYears)
CCF1 <- CCF
## rank by numYears
CCF1 <- arrange(CCF1, desc(numYears))
## chop out rows where numYears<7
CCF1 <- CCF1[CCF1$numYears>6,]
CCF1 <- na.omit(CCF1)
# if statement to skip species which won't run
if (nrow(CCF1)<2){
print(paste("skip species", g, "year", i+4.5))
next
}
pair.attr <- pair.list ## matrix to hold attributes of pairs...
colnames(pair.attr) <- c("site1","site2")
pair.attr <- cbind(pair.attr, CCF)     ### add in correlation scores and number of comparisons at each site.
head(pair.attr)
###  correct site numbers ###
pair.attr <- merge(pair.attr, site_match, by.x="site1", by.y="TS_name")
pair.attr <- pair.attr[,c("site_name", "site2", "lag0", "numYears")]
names(pair.attr) <- gsub("site_name", "site1", names(pair.attr))
pair.attr <- merge(pair.attr, site_match, by.x="site2", by.y="TS_name")
pair.attr <- pair.attr[,c("site1", "site_name", "lag0", "numYears")]
names(pair.attr) <- gsub("site_name", "site2", names(pair.attr))
### drop sites comparisons with <7 years of survey data in common
new_pair_attr <- pair.attr[pair.attr$numYears>6,]
new_pair_attr <- new_pair_attr[!is.na(new_pair_attr$lag0),]
new_pair_attr$mid.year<-mid.year
new_pair_attr$start.year<-start.year
new_pair_attr$end.year<-end.year
# create a table of all pair-wise comparisons, this will be built up as we move through years
all_pair_attr <- NULL
all_pair_attr <- rbind(all_pair_attr, new_pair_attr)
### record the number of good pair-wise comparisons and number of unique sites
temp_summ_stats <- data.frame(total_comps = nrow(new_pair_attr), uni_sites = length(unique(c(new_pair_attr$site1, new_pair_attr$site2))))
tp_summ_stats <- NULL
tp_summ_stats <- rbind(tp_summ_stats, temp_summ_stats)
tp_summ_stats$mid.year<-mid.year
tp_summ_stats$start.year<-start.year
tp_summ_stats$end.year<-end.year
### add in species info
tp_summ_stats$spp <- g
final_summ_stats <- rbind(final_summ_stats, tp_summ_stats)
all_pair_attr$spp <- g
final_pair_data <- rbind(final_pair_data, all_pair_attr)
} # end i in year
} # end g in species
good.species.list
### split based on species ###
for (g in spp.list[33]){print(g)} # loop through spp.list
final_pair_data <- NULL
final_summ_stats <- NULL
### split based on species ###
for (g in spp.list[34:38]){ # loop through spp.list
spp_data <- final_data[final_data$name==g,]
total_comp <- NULL
print(paste("species",g))
year.list<-1980:1991
for (i in year.list){ # loop through years
start.year<-i
mid.year<-i+4.5
print(paste("mid.year=",mid.year))
end.year<-i+9
species.10.yr.data<-spp_data[spp_data$year>=start.year&spp_data$year<=end.year,]
################################
# create a matrix to be filled #
site.list <- unique(species.10.yr.data$site)
site.list
year.list.temp <- min(species.10.yr.data$year):max(species.10.yr.data$year)
year.list.temp
Grow.matrix<-matrix(c(species.10.yr.data$gr), nrow=length(year.list.temp))
Grow.matrix
ncol(Grow.matrix)
rownames(Grow.matrix)<-year.list.temp
colnames(Grow.matrix)<-site.list
Grow.matrix
length(site.list)
num.ts <- length(site.list)   # number of time series
TS <- matrix(Grow.matrix, ncol=num.ts)    # stores Grow data in a matrix     (simply removes names!)
TS
# create site match table used to correct sites names after calculating synchrony
site_match <- data.frame(TS_name = 1:ncol(TS), site_name = colnames(Grow.matrix))
###############################
# cross-correlation functions #
pair.list <- NULL             # calculates combination between all the pairs of sites
for(k in 1:(num.ts-1)){
pair.list <- rbind(pair.list, cbind(rep(k, num.ts-k), (k+1):num.ts)) ## species 508 has only 2 sites, so this line of code doesn't work...
} # end k in num.ts-1
nrow(pair.list)
colnames(pair.list) <- c("site1","site2")
#### NOTE- ADD IN THE REAL SITE NAMES HERE, MERGE WITH SITE_DATA TABLE, THEN  CUT DOWN THE TABLE TO ONLY INCLUDE PAIRS WHERE distance < 100000 (100km)) ####
## e.g.   merge(data1,data2,by.x=c(col1,col2),by.y=c(site_a,site_b)) ##
###  correct site numbers ###
pair.list <- merge(pair.list, site_match, by.x="site1", by.y="TS_name")
pair.list <- pair.list[,c("site_name", "site2")]
names(pair.list) <- gsub("site_name", "site1", names(pair.list))
pair.list <- merge(pair.list, site_match, by.x="site2", by.y="TS_name")
pair.list <- pair.list[,c("site1", "site_name")]
names(pair.list) <- gsub("site_name", "site2", names(pair.list))
## merge pair.list with site data
site_data[,c(1,2)] <- sapply(site_data[,c(1,2)], as.factor)
site_data_pair1 <- merge(pair.list, site_data, by.x=c("site1", "site2"), by.y=c("site_a", "site_b"))
site_data_reverse <- site_data
names(site_data_reverse)[1:6] <- c("site_b", "site_a", "site_b_EAST", "site_b_NORTH", "site_a_EAST", "site_a_NORTH")
site_data_pair2 <- merge(pair.list, site_data_reverse, by.x=c("site1", "site2"), by.y=c("site_a", "site_b"))
site_data_pair <- rbind(site_data_pair1, site_data_pair2)
# unique(pair.list$site1)[!unique(pair.list$site1)%in%unique(site_data$site_a)]   # how many sites are missing attribute data
## remove site pair comparisons more than 100km apart
site_data_pair <- site_data_pair[site_data_pair$distance <= 100000,]
pair.list<-merge(pair.list,site_data_pair,by.x=c("site1", "site2"),by.y=c("site1", "site2"))[,1:2]
# change site names back to numbers
pair.list <- merge(pair.list, site_match, by.x="site1", by.y="site_name")
pair.list <- pair.list[,c("TS_name", "site2")]
names(pair.list) <- gsub("TS_name", "site1", names(pair.list))
pair.list <- merge(pair.list, site_match, by.x="site2", by.y="site_name")
pair.list <- pair.list[,c("site1", "TS_name")]
names(pair.list) <- gsub("TS_name", "site2", names(pair.list))
## calculate cross-correlation functions at different time lags
## (NB - we are only be interested in the current year, i.e. lag = 0)
max.lag <- 0 # maximum time lag over which cross-correlations are assessed
CCF <- data.frame(matrix(NA, ncol = 2*max.lag+2, nrow = nrow(pair.list)))	## matrix to store cross-correlation coefficients
names(CCF) <- c(paste("lag", -max.lag:max.lag, sep=""), "numYears") ## adds column names
for(k in 1:nrow(pair.list)){
# print(paste("row number=",k,"out of",nrow(pair.list)))
## calculate number of years to base correlation on...
CCF$numYears[k] <- length(na.omit((TS[,pair.list[k,1]]+TS[,pair.list[k,2]]))) ## add up number of times when sum can be done (i.e. neither is NA) then only include site with > 6 common years of data
## attempt calculation of CCF...
try(CCF[k,-ncol(CCF)] <- ccf(TS[,pair.list[k,1]], TS[,pair.list[k,2]], lag.max=max.lag, na.action=na.exclude, plot=F, type="correlation")$acf, silent=T) ## use try to prevent crashes if no data
} ## this will take a long time!!!
#hist(CCF$lag0)
#hist(CCF$numYears)
CCF1 <- CCF
## rank by numYears
CCF1 <- arrange(CCF1, desc(numYears))
## chop out rows where numYears<7
CCF1 <- CCF1[CCF1$numYears>6,]
CCF1 <- na.omit(CCF1)
# if statement to skip species which won't run
if (nrow(CCF1)<2){
print(paste("skip species", g, "year", i+4.5))
next
}
pair.attr <- pair.list ## matrix to hold attributes of pairs...
colnames(pair.attr) <- c("site1","site2")
pair.attr <- cbind(pair.attr, CCF)     ### add in correlation scores and number of comparisons at each site.
head(pair.attr)
###  correct site numbers ###
pair.attr <- merge(pair.attr, site_match, by.x="site1", by.y="TS_name")
pair.attr <- pair.attr[,c("site_name", "site2", "lag0", "numYears")]
names(pair.attr) <- gsub("site_name", "site1", names(pair.attr))
pair.attr <- merge(pair.attr, site_match, by.x="site2", by.y="TS_name")
pair.attr <- pair.attr[,c("site1", "site_name", "lag0", "numYears")]
names(pair.attr) <- gsub("site_name", "site2", names(pair.attr))
### drop sites comparisons with <7 years of survey data in common
new_pair_attr <- pair.attr[pair.attr$numYears>6,]
new_pair_attr <- new_pair_attr[!is.na(new_pair_attr$lag0),]
new_pair_attr$mid.year<-mid.year
new_pair_attr$start.year<-start.year
new_pair_attr$end.year<-end.year
# create a table of all pair-wise comparisons, this will be built up as we move through years
all_pair_attr <- NULL
all_pair_attr <- rbind(all_pair_attr, new_pair_attr)
### record the number of good pair-wise comparisons and number of unique sites
temp_summ_stats <- data.frame(total_comps = nrow(new_pair_attr), uni_sites = length(unique(c(new_pair_attr$site1, new_pair_attr$site2))))
tp_summ_stats <- NULL
tp_summ_stats <- rbind(tp_summ_stats, temp_summ_stats)
tp_summ_stats$mid.year<-mid.year
tp_summ_stats$start.year<-start.year
tp_summ_stats$end.year<-end.year
### add in species info
tp_summ_stats$spp <- g
final_summ_stats <- rbind(final_summ_stats, tp_summ_stats)
all_pair_attr$spp <- g
final_pair_data <- rbind(final_pair_data, all_pair_attr)
} # end i in year
} # end g in species
final_pair_data <- NULL
final_summ_stats <- NULL
### split based on species ###
for (g in spp.list[37:38]){ # loop through spp.list
spp_data <- final_data[final_data$name==g,]
total_comp <- NULL
print(paste("species",g))
year.list<-1980:1991
for (i in year.list){ # loop through years
start.year<-i
mid.year<-i+4.5
print(paste("mid.year=",mid.year))
end.year<-i+9
species.10.yr.data<-spp_data[spp_data$year>=start.year&spp_data$year<=end.year,]
################################
# create a matrix to be filled #
site.list <- unique(species.10.yr.data$site)
site.list
year.list.temp <- min(species.10.yr.data$year):max(species.10.yr.data$year)
year.list.temp
Grow.matrix<-matrix(c(species.10.yr.data$gr), nrow=length(year.list.temp))
Grow.matrix
ncol(Grow.matrix)
rownames(Grow.matrix)<-year.list.temp
colnames(Grow.matrix)<-site.list
Grow.matrix
length(site.list)
num.ts <- length(site.list)   # number of time series
TS <- matrix(Grow.matrix, ncol=num.ts)    # stores Grow data in a matrix     (simply removes names!)
TS
# create site match table used to correct sites names after calculating synchrony
site_match <- data.frame(TS_name = 1:ncol(TS), site_name = colnames(Grow.matrix))
###############################
# cross-correlation functions #
pair.list <- NULL             # calculates combination between all the pairs of sites
for(k in 1:(num.ts-1)){
pair.list <- rbind(pair.list, cbind(rep(k, num.ts-k), (k+1):num.ts)) ## species 508 has only 2 sites, so this line of code doesn't work...
} # end k in num.ts-1
nrow(pair.list)
colnames(pair.list) <- c("site1","site2")
#### NOTE- ADD IN THE REAL SITE NAMES HERE, MERGE WITH SITE_DATA TABLE, THEN  CUT DOWN THE TABLE TO ONLY INCLUDE PAIRS WHERE distance < 100000 (100km)) ####
## e.g.   merge(data1,data2,by.x=c(col1,col2),by.y=c(site_a,site_b)) ##
###  correct site numbers ###
pair.list <- merge(pair.list, site_match, by.x="site1", by.y="TS_name")
pair.list <- pair.list[,c("site_name", "site2")]
names(pair.list) <- gsub("site_name", "site1", names(pair.list))
pair.list <- merge(pair.list, site_match, by.x="site2", by.y="TS_name")
pair.list <- pair.list[,c("site1", "site_name")]
names(pair.list) <- gsub("site_name", "site2", names(pair.list))
## merge pair.list with site data
site_data[,c(1,2)] <- sapply(site_data[,c(1,2)], as.factor)
site_data_pair1 <- merge(pair.list, site_data, by.x=c("site1", "site2"), by.y=c("site_a", "site_b"))
site_data_reverse <- site_data
names(site_data_reverse)[1:6] <- c("site_b", "site_a", "site_b_EAST", "site_b_NORTH", "site_a_EAST", "site_a_NORTH")
site_data_pair2 <- merge(pair.list, site_data_reverse, by.x=c("site1", "site2"), by.y=c("site_a", "site_b"))
site_data_pair <- rbind(site_data_pair1, site_data_pair2)
# unique(pair.list$site1)[!unique(pair.list$site1)%in%unique(site_data$site_a)]   # how many sites are missing attribute data
## remove site pair comparisons more than 100km apart
site_data_pair <- site_data_pair[site_data_pair$distance <= 100000,]
pair.list<-merge(pair.list,site_data_pair,by.x=c("site1", "site2"),by.y=c("site1", "site2"))[,1:2]
# change site names back to numbers
pair.list <- merge(pair.list, site_match, by.x="site1", by.y="site_name")
pair.list <- pair.list[,c("TS_name", "site2")]
names(pair.list) <- gsub("TS_name", "site1", names(pair.list))
pair.list <- merge(pair.list, site_match, by.x="site2", by.y="site_name")
pair.list <- pair.list[,c("site1", "TS_name")]
names(pair.list) <- gsub("TS_name", "site2", names(pair.list))
## calculate cross-correlation functions at different time lags
## (NB - we are only be interested in the current year, i.e. lag = 0)
max.lag <- 0 # maximum time lag over which cross-correlations are assessed
CCF <- data.frame(matrix(NA, ncol = 2*max.lag+2, nrow = nrow(pair.list)))	## matrix to store cross-correlation coefficients
names(CCF) <- c(paste("lag", -max.lag:max.lag, sep=""), "numYears") ## adds column names
for(k in 1:nrow(pair.list)){
# print(paste("row number=",k,"out of",nrow(pair.list)))
## calculate number of years to base correlation on...
CCF$numYears[k] <- length(na.omit((TS[,pair.list[k,1]]+TS[,pair.list[k,2]]))) ## add up number of times when sum can be done (i.e. neither is NA) then only include site with > 6 common years of data
## attempt calculation of CCF...
try(CCF[k,-ncol(CCF)] <- ccf(TS[,pair.list[k,1]], TS[,pair.list[k,2]], lag.max=max.lag, na.action=na.exclude, plot=F, type="correlation")$acf, silent=T) ## use try to prevent crashes if no data
} ## this will take a long time!!!
#hist(CCF$lag0)
#hist(CCF$numYears)
CCF1 <- CCF
## rank by numYears
CCF1 <- arrange(CCF1, desc(numYears))
## chop out rows where numYears<7
CCF1 <- CCF1[CCF1$numYears>6,]
CCF1 <- na.omit(CCF1)
# if statement to skip species which won't run
if (nrow(CCF1)<2){
print(paste("skip species", g, "year", i+4.5))
next
}
pair.attr <- pair.list ## matrix to hold attributes of pairs...
colnames(pair.attr) <- c("site1","site2")
pair.attr <- cbind(pair.attr, CCF)     ### add in correlation scores and number of comparisons at each site.
head(pair.attr)
###  correct site numbers ###
pair.attr <- merge(pair.attr, site_match, by.x="site1", by.y="TS_name")
pair.attr <- pair.attr[,c("site_name", "site2", "lag0", "numYears")]
names(pair.attr) <- gsub("site_name", "site1", names(pair.attr))
pair.attr <- merge(pair.attr, site_match, by.x="site2", by.y="TS_name")
pair.attr <- pair.attr[,c("site1", "site_name", "lag0", "numYears")]
names(pair.attr) <- gsub("site_name", "site2", names(pair.attr))
### drop sites comparisons with <7 years of survey data in common
new_pair_attr <- pair.attr[pair.attr$numYears>6,]
new_pair_attr <- new_pair_attr[!is.na(new_pair_attr$lag0),]
new_pair_attr$mid.year<-mid.year
new_pair_attr$start.year<-start.year
new_pair_attr$end.year<-end.year
# create a table of all pair-wise comparisons, this will be built up as we move through years
all_pair_attr <- NULL
all_pair_attr <- rbind(all_pair_attr, new_pair_attr)
### record the number of good pair-wise comparisons and number of unique sites
temp_summ_stats <- data.frame(total_comps = nrow(new_pair_attr), uni_sites = length(unique(c(new_pair_attr$site1, new_pair_attr$site2))))
tp_summ_stats <- NULL
tp_summ_stats <- rbind(tp_summ_stats, temp_summ_stats)
tp_summ_stats$mid.year<-mid.year
tp_summ_stats$start.year<-start.year
tp_summ_stats$end.year<-end.year
### add in species info
tp_summ_stats$spp <- g
final_summ_stats <- rbind(final_summ_stats, tp_summ_stats)
all_pair_attr$spp <- g
final_pair_data <- rbind(final_pair_data, all_pair_attr)
} # end i in year
} # end g in species
rm(list=ls()) # clear R
library(plyr)
### add data
final_data <- read.csv("../Data/Butterfly_sync_data/final_data_all_spp.csv", header = TRUE) # add growth rate data
b_data <- read.csv("../Data/Butterfly_sync_data/b_data.csv", header = TRUE) # add butterfly count data
site_data <- read.csv("../Data/UKBMS_data/pair_attr_mean_northing_dist_sim.csv", header = TRUE) # site data
b_data<-b_data[b_data$YEAR>=1980,]
b.data.summary.tab<-with(b_data,table(SPECIES,YEAR))
b.data.summary.good.years<-NULL
for (i in 1:nrow(b.data.summary.tab)){
no.good.years<-length(b.data.summary.tab[i,][b.data.summary.tab[i,]>=50])  # filter 1:      50 sites/year
sp<-row.names(b.data.summary.tab)[i]
results.temp<-data.frame(sp,no.good.years)
b.data.summary.good.years<-rbind(b.data.summary.good.years,results.temp)
}
b.data.summary.good.years
# filter 2: only select species with >75% 'good years' (i.e. with more than 50 sites/year)
length(1980:2016)*0.75
good.species.list<-b.data.summary.good.years$sp[b.data.summary.good.years$no.good.years>27.75]
good.species.list
View(final_data)
rm(list=ls()) # clear R
### add data
b_data <- read.csv("../Data/Butterfly_sync_data/b_data.csv", header = TRUE) # add butterfly count data
b_data <- unique(b_data) # drop duplicate rows
b_data$SINDEX<-b_data$SINDEX+1  # add 1 to each annual count to avoid problem of logging zeros
final_data <- NULL
zero_count_data <- NULL
for (g in unique(b_data$SPECIES)){ # loop for each species #
species.tab<-b_data[b_data$SPECIES==g,]
head(species.tab)
print(paste("species",g))
new_butterfly_final<-NULL
# id site list for 10yr moving window
site.list <- unique(species.tab$SITE)
gr <- NULL
new_butterfly <- NULL
for (j in site.list){
temp.table <- species.tab[species.tab$SITE==j,] # make a mini table of the site in question
gr <- NULL # clear gr column
SINDEX <- NULL
# create a mini table per species, how many years are NOT!! zero counts (1 counts here as +1 above)#
zero_count_data <- rbind(zero_count_data, data.frame(SPECIES = g, SITE = j, good_years = nrow(na.omit(temp.table[temp.table$SINDEX>1,]))))
for (i in (min(species.tab$YEAR):max(species.tab$YEAR))){ # loop through each year
print(paste("Year=", i))
# convert to growth rate
if(length(temp.table[temp.table$YEAR==i,"SINDEX"]) + length(temp.table[temp.table$YEAR==(i-1),"SINDEX"]) < 2){		# if there is less than two years of data
gr <- c(gr,NA) # gr gets NA
} else {
gr <- c(gr, (log(temp.table[temp.table$YEAR==i,"SINDEX"]) - log(temp.table[temp.table$YEAR==(i-1),"SINDEX"]))) # else gr gets the log growth rate calculation
}
# take sindex and add NA if no count made
if(length(temp.table[temp.table$YEAR==i,"SINDEX"]) == 1){
SINDEX <- c(SINDEX, temp.table[temp.table$YEAR==i,"SINDEX"])
} else {
SINDEX <- c(SINDEX, NA)
}
}  # end i in  min(species.tab$YEAR):max(species.tab$YEAR)
# sort out any NaNs, or Infs - make them NAs
gr <- as.numeric(gsub("NaN", "NA", gr))
gr <- as.numeric(gsub("Inf", "NA", gr))
gr <- as.numeric(gsub("-Inf", "NA", gr))
# create a mini table per site
new_data <- data.frame(site = rep(j,length(min(species.tab$YEAR):max(species.tab$YEAR))), year = min(species.tab$YEAR):max(species.tab$YEAR), gr = gr, SINDEX = SINDEX)
new_butterfly <- rbind(new_butterfly, new_data) # rbind the full growth rates per site per year with NAs added for the missing years
}  # end j in site list
new_butterfly_final <- rbind(new_butterfly_final, new_butterfly)
new_butterfly_final$name <- g   # add in species code
final_data <- rbind(final_data, new_butterfly_final)   #  all species data
} # end g in species
